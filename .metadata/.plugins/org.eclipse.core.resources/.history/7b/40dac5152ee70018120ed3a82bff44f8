

============================================================================

What is functional programming?

It is a popular programming paradigms, which does computation with out 
changing the state and mutating data.

Eg: Scala , Haskell, Erlang

=============================================================================

Functional Programming Languages like Scala have the following Characteristics

1.State does not exist.

FP Programs does not contain state. That means all Data is Immutable Data and 
Functions cannot change state.

2. Low importance of Order of Execution

In FP Languages, we write programs with a set of Independent Functions. 
Functions contain a set of statements.
In FP, the order of execution of those Functions does not have much importance 
because they do not have state and all Functions work independently. 
Even if we change the order of execution still they produce the same results.

3.Stateless Programming Model

All FP Programs uses Immutable data and Functions, which cannot modify that data. 
That means FP Languages support Stateless Programming Model.

4.Functions are first class citizens

In FP Languages, Functions are first class objects. Functions are independent units, 
we can execute them in any order.

5. Primary Manipulations Units
In FP Languages, Primary Manipulations units are Functions and Data Structures 
because All Programs are made up of using these units.

6. Modular Programming
In FP Languages, we need to write smaller and independent units, 
called Pure Functions to support Stateless Programming model. 
That means FP supports better Modularity than OOP.

7. Higher-order Functions and Lazy Evaluation

Functional Programming Languages should support Higher-order functions and 
Lazy Evaluation features.

8. Primary Flow Controls
FP Languages don’t use Flow Controls like For…Loop, Do…While Loop, 
While…Loop etc and also don’t use Conditional statements like If..Else or Switch Statements. All FP Languages write programs using the following things:

9. Functions
Function calls
Function calls with Recursion
Abstraction,Encaspulation,Inheritance and Polymorphism
Like OOP, FP Languages supports all 4 concepts : Abstraction,Encaspulation,Inheritance and Polymorphism. FP Languages supports Inheritance with Type Classes or Implicits. They support Polymorphism with the help of Generics. It is also known as Parametric Polymorphism.


=============================================================================================

Object-oriented languages are good when you have a fixed set of operations on things, 
and as your code evolves, you primarily add new things. 
This can be accomplished by adding new classes which implement existing methods, 
and the existing classes are left alone.


Functional languages are good when you have a fixed set of things, 
and as your code evolves, you primarily add new operations on existing things. 
This can be accomplished by adding new functions which compute with existing data types, 
and the existing functions are left alone.
==============================================================================================

Pure Functions:
===============

A function is a pure function if:

The execution of the function has no side effects.
The return value of the function depends only on the input parameters passed to the function.
Here is an example of a pure function (method) in Java:

public class ObjectWithPureFunction{

    public int sum(int a, int b) {
        return a + b;
    }
}
